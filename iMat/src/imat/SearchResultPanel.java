/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imat;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import se.chalmers.ait.dat215.project.Product;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author jonathan
 */
public class SearchResultPanel extends JPanel {

    /**
     * Creates new form SearchResultPanel
     */
    
    private static SearchResultPanel test = new SearchResultPanel("hej");
    
    public SearchResultPanel() {
        initComponents();
        this.setBackground(IMatColors.getpanelBackgroundLight());
    }
    
    private SearchResultPanel(String s) {
        initComponents();
        this.test = this;
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        areaOfSearchResult = new javax.swing.JScrollPane();
        searchResultCardContainer = new javax.swing.JPanel();

        areaOfSearchResult.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        areaOfSearchResult.setToolTipText("");
        areaOfSearchResult.setMaximumSize(new java.awt.Dimension(734, 281));
        areaOfSearchResult.setMinimumSize(new java.awt.Dimension(734, 281));
        areaOfSearchResult.setPreferredSize(new java.awt.Dimension(734, 281));

        searchResultCardContainer.setMaximumSize(new java.awt.Dimension(734, 281));
        searchResultCardContainer.setMinimumSize(new java.awt.Dimension(734, 281));
        searchResultCardContainer.setPreferredSize(new java.awt.Dimension(734, 281));

        javax.swing.GroupLayout searchResultCardContainerLayout = new javax.swing.GroupLayout(searchResultCardContainer);
        searchResultCardContainer.setLayout(searchResultCardContainerLayout);
        searchResultCardContainerLayout.setHorizontalGroup(
            searchResultCardContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
        );
        searchResultCardContainerLayout.setVerticalGroup(
            searchResultCardContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        areaOfSearchResult.setViewportView(searchResultCardContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(areaOfSearchResult, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(areaOfSearchResult, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        areaOfSearchResult.getVerticalScrollBar().setUnitIncrement(16);
    }// </editor-fold>//GEN-END:initComponents

    public void displayResults(List<Product> results) {
        searchResultCardContainer.removeAll();
        revalidate();
        int nbrOfResults = results.size();
        
        //Sorterar listan efter produktnamn i alfabetiskordning
        Collections.sort(results, new Comparator<Product>() {
            @Override
            public int compare(Product p1, Product p2) {
                return p1.getName().compareToIgnoreCase(p2.getName());
            }
        });
        
        if (nbrOfResults == 1) {
            // Centrera ett resultat
            System.out.println("Ett");
            searchResultCardContainer.setLayout(new FlowLayout());
            ProductCard pc = new ProductCard(results.get(0));
            pc.setVisible(true);
            searchResultCardContainer.add(pc);
        } else {
            //Rita ut allt p√• 4 kolumner
            int nbrOfRows = nbrOfResults/4 + 1;
            int nbrOfColumns = 4;
            searchResultCardContainer.removeAll();
            searchResultCardContainer.repaint();
            searchResultCardContainer.revalidate();
            GridLayout grid = new GridLayout();
            if(nbrOfRows<3) {
                nbrOfRows=3;
                areaOfSearchResult.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
                areaOfSearchResult.updateUI();
            } else {
                areaOfSearchResult.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            }
            grid.setRows(nbrOfRows);
            grid.setColumns(nbrOfColumns);
            grid.setHgap(10);
            grid.setVgap(10);
            searchResultCardContainer.setLayout(grid);
            ArrayList<ProductCard> pc = new ArrayList(results.size());
            for (int i=0; i<nbrOfResults; i++) {
                pc.add(new ProductCard(results.get(i)));
            }
            
            for(int i=0; i<results.size(); i++) {
                searchResultCardContainer.add(pc.get(i));
            }
            
            if(nbrOfResults<(nbrOfColumns*nbrOfRows)) {
                for(int i=nbrOfResults+1; i<(nbrOfColumns*nbrOfRows); i++) {
                    searchResultCardContainer.add(new JPanel());
                }
            }
            
            Dimension cardDimension = new Dimension(nbrOfColumns*157, nbrOfRows*173);
            searchResultCardContainer.setMinimumSize(cardDimension);
            searchResultCardContainer.setMaximumSize(cardDimension);
            searchResultCardContainer.setPreferredSize(cardDimension);
            searchResultCardContainer.setSize(cardDimension);
        }
        
        searchResultCardContainer.repaint();
        searchResultCardContainer.revalidate();
        areaOfSearchResult.repaint();
        areaOfSearchResult.revalidate();
        repaint();
        revalidate();
    }
    
    public static SearchResultPanel getInstance() {
        return test;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane areaOfSearchResult;
    private javax.swing.JPanel searchResultCardContainer;
    // End of variables declaration//GEN-END:variables
    
}
